// This is an autogenerated file from Genkit, do not modify.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for generating AI content (text or image) based on a user prompt.
 *
 * - generateAIContent - A function that takes a prompt and content type, and returns the generated content and IP claim details.
 * - GenerateAIContentInput - The input type for the generateAIContent function.
 * - GenerateAIContentOutput - The return type for the generateAIContent function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {SHA256} from 'crypto-js';

const GenerateAIContentInputSchema = z.object({
  prompt: z.string().describe('The prompt to use for generating the content.'),
  contentType: z.enum(['text', 'image']).describe('The type of content to generate (text or image).'),
});
export type GenerateAIContentInput = z.infer<typeof GenerateAIContentInputSchema>;

const GenerateAIContentOutputSchema = z.object({
  content: z.string().describe('The generated content (text or image data URI).'),
  ipHash: z.string().describe('The SHA256 hash of the generated content.'),
  timestamp: z.number().describe('The timestamp of when the content was generated.'),
  certificatePreview: z.string().describe('A preview of the IP certificate (e.g., a data URI for an image).'),
});
export type GenerateAIContentOutput = z.infer<typeof GenerateAIContentOutputSchema>;

export async function generateAIContent(input: GenerateAIContentInput): Promise<GenerateAIContentOutput> {
  return generateAIContentFlow(input);
}

const generateAIContentPrompt = ai.definePrompt({
  name: 'generateAIContentPrompt',
  input: {schema: GenerateAIContentInputSchema},
  prompt: `Generate the following content:

Content Type: {{{contentType}}}
Prompt: {{{prompt}}}`,
});

const generateAIContentFlow = ai.defineFlow(
  {
    name: 'generateAIContentFlow',
    inputSchema: GenerateAIContentInputSchema,
    outputSchema: GenerateAIContentOutputSchema,
  },
  async input => {
    let content: string;

    if (input.contentType === 'image') {
      const {media} = await ai.generate({
        model: 'googleai/gemini-2.0-flash-exp',
        prompt: input.prompt,
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      });
      content = media.url!;
    } else {
      const {text} = await generateAIContentPrompt(input);
      content = text!;
    }

    const ipHash = SHA256(content).toString();
    const timestamp = Date.now();
    // Basic certificate preview (replace with actual implementation)
    const certificatePreview = `Data URI: Certificate for content created on ${new Date(timestamp).toLocaleDateString()} with hash ${ipHash}`; //Dummy data URI

    return {
      content,
      ipHash,
      timestamp,
      certificatePreview,
    };
  }
);
